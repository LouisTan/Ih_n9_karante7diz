% dct: computes the discrete cosinus tranform of a matrix
function [block_dct] = dct(block)
assert(numel(block)>0 && size(block,1)==size(block,2) && mod(size(block,1),2)==0);
%block_dct = zeros(size(block));
block_dct = [];
block_size = 8;

 function [r_w] = racine(w)
    if w == 1
        r_w = 1./sqrt(block_size);
    else
        r_w = 2./sqrt(block_size);
    end
    end
    
    function [c_w] = cosinus(k,w)
    c_w = cos( (pi*(2*k +1)*w) / (2*block_size) );
    end


run = 0;
if (run)
    for u=1:block_size
        for v=1:block_size
            cst = racine(u)*racine(v)
            somme = 0;
            for i=1:block_size
                for j=1:block_size
                    somme = somme + cst*block(i,j)*cosinus(i,u)*cosinus(j,v);
                end
            end
            block_dct(u,v) = somme;
            
        end
    end
else
    m = size(dct_block, 1);
    n = size(dct_block, 2);
    idct_block = zeros(m,n);
    
    % c(w) function
    c = @(w) sqrt(((abs(w) > 1)*1+1) / n);
    
    % Define the x and y arrays for the DCT transformation
    u = repmat((1:m)',1,n);
    v = repmat(1:n,m,1);
    
    % Define the cosinus function used in the summation.
    cos_dct = @(x,u) cos(pi .* (2 .*(x - 1) + 1) .* (u - 1) ./ (2 .* n));
    
    % DCT transformation
    F = @(x,y) sum(sum(c(u) .* c(v) .* dct_block .* cos_dct(x,u) .* cos_dct(y,v)));
    
    for x=1:m
        for y=1:n
            idct_block(x,y) = F(x,y);
        end
    end
end
end